public enum Role {
    USER, ADMIN, MANAGER
}

@Column(name = "role")
@Enumerated(EnumType.STRING)
private Role role;

Explanation:
1. @Column(name = "role")
- This tells JPA to map the role field to the column named role in the database.
- You could also specify other attributes like nullable, length, unique, etc.

2. @Enumerated(EnumType.STRING)
- This tells JPA how to store the enum value in the database.
- By default (if not specified), JPA uses EnumType.ORDINAL, which stores the index (0, 1, 2…).

EnumType.STRING means:
- Store the name of the enum in the database (like 'USER', 'ADMIN')
- This is more readable and safe than using the ordinal.


Why EnumType.STRING is better than ORDINAL?
Using ORDINAL:
--------------
- USER → stored as 0
- ADMIN → stored as 1
- MANAGER → stored as 2

If you change the order later:

public enum Role {
    ADMIN, USER, MANAGER
}

Then:
- 0 now means ADMIN instead of USER
- This causes data corruption and unexpected bugs!

Using STRING:
-------------
- It stores "USER" or "ADMIN" — readable and stable even if enum order changes.
- @Enumerated(EnumType.STRING) Stores the enum value as a string (e.g., "ADMIN")